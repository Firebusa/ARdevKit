//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Wenn der Code neu generiert wird, gehen alle Änderungen an dieser Datei verloren
// </auto-generated>
//------------------------------------------------------------------------------
namespace Editor.Controller.EditorController
{
	using Editor.Controller.Connections.DeviceConnection;
	using Editor.Model.Project;
	using Editor.View.EditorWindow;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   A controller for handling editor windows. </summary>
    ///
    /// <remarks>
    /// bei Programmstart wird registerElements() aufgerufen. In registerElements() stehen alle
    /// Elemente die einer Szene hinzugefügt werden können und werden zu kategorien hinzugefügt. die
    /// Kategorien werden mit addCategory zum Controller hinzugefügt.
    /// </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

	public class EditorWindowController
	{
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the start debug mode local. </summary>
        ///
        /// <value> true if start debug mode local, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

		private boolean startDebugModeLocal
		{
			get;
			set;
		}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether the start debug mode device. </summary>
        ///
        /// <value> true if start debug mode device, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

		private boolean startDebugModeDevice
		{
			get;
			set;
		}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the categories the element belongs to. </summary>
        ///
        /// <value> The element categories. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

		private List<SceneElementCategory> elementCategories
		{
			get;
			set;
		}

		public virtual {
			get;
			set;
		}

		public virtual {
			get;
			set;
		}

		public virtual {
			get;
			set;
		}

		public virtual {
			get;
			set;
		}

		public virtual {
			get;
			set;
		}

		public virtual {
			get;
			set;
		}

		public virtual void loadProject()
		{
			throw new System.NotImplementedException();
		}

		public virtual void saveProject()
		{
			throw new System.NotImplementedException();
		}

		public virtual void exportProject()
		{
			throw new System.NotImplementedException();
		}

		public virtual void createNewProject(string name)
		{
			throw new System.NotImplementedException();
		}

		private void addCategory(ARdevKit_UML::Editor::Controller::EditorController::SceneElementCategory category)
		{
			throw new System.NotImplementedException();
		}

		public virtual void sendToDevice()
		{
			throw new System.NotImplementedException();
		}

		public virtual void updatePreviewPanel()
		{
			throw new System.NotImplementedException();
		}

		public virtual void updateSceneSelectionPanel()
		{
			throw new System.NotImplementedException();
		}

		public virtual void updateStatusBar()
		{
			throw new System.NotImplementedException();
		}

		public virtual void openTestWindow()
		{
			throw new System.NotImplementedException();
		}

		public virtual void openDebugWindow()
		{
			throw new System.NotImplementedException();
		}

		public virtual void addDevice()
		{
			throw new System.NotImplementedException();
		}

		public virtual void updatePropertyPanel(IPreviewable selectedElement)
		{
			throw new System.NotImplementedException();
		}

		public virtual void updateElementSelectionPanel()
		{
			throw new System.NotImplementedException();
		}

		public virtual void registerElements()
		{
			throw new System.NotImplementedException();
		}

	}
}

